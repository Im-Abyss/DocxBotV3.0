from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext

import app.keyboards as kb
from truancy import create_doc, test
from app.FSM import Ai
from app.ai import main


router = Router()


@router.message(F.text == '–Ø –∞–±–æ–±–∞')
async def test_document(message: Message):
    await test(message=message)


@router.message(CommandStart())
async def start(message: Message):
    await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç.', 
                         reply_markup=kb.keyboard_truancy)


@router.message(F.document)
async def handle_document(message: Message):
    await create_doc(message=message)


@router.message(Command('ai'))
async def ai_help(message: Message, state: FSMContext):
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å üòä')
    await state.set_state(Ai.ai_message)


@router.message(StateFilter(Ai.ai_message))
async def try_ai(message: Message, state: FSMContext):
    content = message.text
    response = await main(content=content)
    await message.answer(response)
    state.clear

# @router.message(Command('test'))
# async def send_docx_file(message: Message):
#     # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
#     file_path = os.path.join(os.path.dirname(__file__), 'pattern.docx')

#     # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ
#     with open(file_path, 'rb') as file:
#         file_bytes = file.read()

#     # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
#     file_stream = io.BytesIO(file_bytes)
#     file_stream.seek(0)

#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#     await message.reply_document(
#         document=types.BufferedInputFile(file=file_stream.read(), filename='pattern.docx')
#     )